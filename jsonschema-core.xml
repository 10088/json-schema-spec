<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC3986 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3986.xml">
<!ENTITY RFC5988 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5988.xml">
<!ENTITY RFC6901 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6901.xml">
<!ENTITY RFC6906 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6906.xml">
<!ENTITY RFC7159 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7159.xml">
<!ENTITY RFC7231 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7231.xml">
]>
<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc strict="no"?>
<?rfc rfcedstyle="yes"?>
<rfc category="info" docName="draft-zyp-json-schema-05" ipr="trust200902">
    <front>
        <title abbrev="JSON Schema">JSON Schema: core definitions and terminology</title>

        <author fullname="Austin Wright" initials="A" surname="Wright" role="editor">
            <address>
                <email>aaa@bzfx.net</email>
            </address>
        </author>

        <author fullname="Francis Galiegue" initials="F" surname="Galiegue">
            <address>
                <email>fgaliegue@gmail.com</email>
            </address>
        </author>

        <author fullname="Kris Zyp" initials="K" surname="Zyp">
            <organization>SitePen (USA)</organization>
            <address>
                <postal>
                    <street>530 Lytton Avenue</street>
                    <city>Palo Alto, CA 94301</city>
                    <country>USA</country>
                </postal>
                <phone>+1 650 968 8787</phone>
                <email>kris@sitepen.com</email>
            </address>
        </author>

        <author fullname="Gary Court" initials="G" surname="Court">
            <address>
                <postal>
                    <street></street>
                    <city>Calgary, AB</city>
                    <country>Canada</country>
                </postal>
                <email>gary.court@gmail.com</email>
            </address>
        </author>

        <date year="2016"/>
        <workgroup>Internet Engineering Task Force</workgroup>
        <keyword>JSON</keyword>
        <keyword>Schema</keyword>
        <keyword>Hyper Schema</keyword>
        <keyword>Hypermedia</keyword>

        <abstract>
            <t>
                JSON Schema defines the media type "application/schema+json", a JSON based format
                for defining the structure of JSON data. JSON Schema asserts what a JSON document
                must look like and how to interact with it, ideal for annotating existing JSON APIs
                that would not hypermedia controls or otherwise be machine-accessible.
            </t>
        </abstract>
    </front>

    <middle>
        <section title="Introduction">
            <t>
                JSON Schema is a JSON media type for defining the structure of JSON data. JSON Schema
                is intended to define validation, documentation, hyperlink navigation, and interaction
                control of JSON data.
            </t>
            <t>
                This specification defines JSON Schema core terminology and mechanisms, including how to
                dereference a JSON Schema, pointing to another JSON Schema by reference, setting the
                vocabulary being used and asserting the minimum vocabulary that must be supported.
            </t>
            <t>
                Other specifications define the vocabularies that perform assertions about validation,
                linking, annotation, navigation, and interaction.
            </t>
        </section>

        <section title="Conventions and Terminology">
            <t>
                <!-- The text in this section has been copied from the official boilerplate,
                and should not be modified.-->

                The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD",
                "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be
                interpreted as described in <xref target="RFC2119">RFC 2119</xref>.
            </t>

            <t>
                The terms "JSON", "JSON text", "JSON value", "member", "element", "object", "array",
                "number", "string", "boolean", "true", "false", and "null" in this document are to
                be interpreted as defined in <xref target="RFC7159">RFC 7159</xref>.
            </t>
        </section>

        <section title="Core terminology">

            <section title="JSON document">
                <t>
                    A JSON document is an information resource (series of octets) describable by the application/json media type.
                </t>
                <t>
                    In JSON Schema, the terms "JSON document", "JSON text", and "JSON value" are interchangable because of the data model it defines.
                </t>
            </section>

            <section title="instance">
                <t>
                    JSON Schema interperts JSON data according to a data model. A JSON value interperted according to this data model is called an "instance".
                </t>
                <t>
                    An instance has one of six primitive types, and a range of possible values depending on the type:

                    <list style="hanging">
                        <t hangText="null">A JSON "null" production</t>
                        <t hangText="boolean">A "true" or "false" value, from the JSON "true" or "false" productions</t>
                        <t hangText="object">An unordered set of properties mapping a string to an instance, from the JSON "object" production</t>
                        <t hangText="array">An ordered list of instances, from the JSON "array" production</t>
                        <t hangText="number">An arbitrary-precision, base-10 decimal number value, from the JSON "number" production</t>
                        <t hangText="string">A string of Unicode code points, from the JSON "string" production</t>
                    </list>
                </t>
                <t>
                    Whitespace and formatting conserns are thus outside the scope of JSON Schema.
                </t>
                <t>
                    Since an object cannot have two properties with the same key, behavior for a JSON document that tries to define two properties (the "member" production) with the same key (the "string" production) in a single object is undefined.
                </t>
            </section>

            <section title="instance equality">
                <t>
                    Two JSON instances are said to be equal if and only if they are of the same type and have the same value according to the data model. Specifically, this is if:

                    <list>
                        <t>both are null; or</t>
                        <t>both are true; or</t>
                        <t>both are false; or</t>
                        <t>both are strings, and are the same codepoint-for-codepoint; or</t>
                        <t>both are numbers, and have the same mathematical value; or</t>
                        <t>both are arrays, and have an equal value item-for-item; or</t>
                        <t>both are objects, and each property in one has exactly one property with an equal key the other, and that other property has an equal value.</t>
                    </list>
                </t>
                <t>
                    Implied in this definition is that arrays must be the same length, objects must have the same number of members, there is no way to define multiple properties with the same key, and mere formatting differences (indentation, placement of commas, trailing zeros) are insignificant.
                </t>
            </section>

            <section title="JSON Schema document">
                <t>
                    A JSON Schema document, or simply a schema, is a JSON document used to describe an instance.
                    A schema is itself interperted as an instance. A JSON schema MUST be an object.
                </t>
                <t>
                    Properties that are used to describe the instance are called keywords, or schema keywords. The meaning of properties is specified by the vocabulary that the schema is using.
                </t>
                <t>
                    A JSON Schema MAY contain properties which are not schema keywords.
                    Unknown keywords SHOULD be ignored.
                </t>
                <t>
                    A schema that itself describes a schema is called a meta-schema. Meta-schemas are used to validate JSON Schemas and specify which vocabulary it is using.
                </t>
                <t>
                    An empty schema is a JSON Schema with no properties, or only unknown properties.
                </t>
            </section>

            <section title="Root schema and subschemas">
                <t>
                    The root schema is the schema that comprises the entire JSON document in question.
                </t>
                <t>
                    Some keywords take schemas themselves, allowing JSON Schemas can be nested:
                </t>
                <figure>
                    <artwork>
<![CDATA[
{
    "title": "root",
    "items": {
        "title": "alsoNested"
    }
}
]]>
                    </artwork>
                </figure>
                <t>
                    In this example document, the schema titled "alsoNested" is a subschema,
                    and the schema titled "root" is the root schema.
                </t>
            </section>

        </section>

        <section title="Overview">
            <t>
                This document proposes a new media type "application/schema+json" to identify JSON
                Schema for describing JSON data. JSON Schemas are themselves written in JSON.  This,
                and related specifications, define keywords allowing to describe this data in terms
                of allowable values, textual descriptions and interpreting relations with other
                resources. The following sections are a summary of features defined by related
                specifications.
            </t>

            <section title="Validation">
                <t>
                    JSON Schema describes the structure of a JSON document (for instance, required properties and array length constraints).
                    Applications can use this information to validate instances (check that constraints are met), or inform interfaces to collect user input such that the constraints are satisfied.
                </t>
                <t>
                    Validation behaviour and keywords are specified in <xref target="json-schema-validation">a separate document</xref>.
                </t>
            </section>

            <section title="Hypermedia and linking">
                <t>
                    JSON Hyper-Schema describes the hypertext structure of a JSON document.
                    This includes link relations from the instance to other resources, interpretation of instances as multimedia data, and submission data required to use an API.
                </t>
                <t>
                    Hyper-schema behaviour and keywords are specified in <xref target="json-hyper-schema">a separate document</xref>.
                </t>
            </section>
        </section>

        <section title="General considerations">

            <section title="Range of JSON values">
                <t>
                    An instance may be any valid JSON value as defined by <xref target="RFC7159">JSON</xref>.
                    JSON Schema imposes no restrictions on type: JSON Schema can describe any JSON value, including, for example, null.
                </t>
            </section>

            <section title="Programming language independence">
                <t>
                    JSON Schema is programming language agnostic, and supports the full range of values described in the data model.
                    Be aware, however, that some languages and JSON parsers may not be able to represent in memory
                    the full range of values describable by JSON.
                </t>
            </section>

            <section title="Mathematical integers">
                <t>
                    Some programming languages and parsers use different internal representations for floating
                    point numbers than they do for integers.
                </t>
                <t>
                    For constistency, integer JSON numbers SHOULD NOT be encoded with a fractional part.
                </t>
            </section>

            <section title="Extending JSON Schema">
                <t>
                    Implementations MAY choose to define additional keywords to JSON Schema. Save
                    for explicit agreement, schema authors SHALL NOT expect these additional
                    keywords to be supported by peer implementations. Implementations SHOULD ignore
                    keywords they do not support.
                </t>
                <t>
                    Authors of extensions to JSON Schema are encouraged to write their own meta-schemas, which extend the existing meta-schemas using "allOf".
                    This extended meta-schema SHOULD be referenced using the "$schema" keyword, to allow tools to follow the correct behaviour.
                </t>
            </section>

        </section>

        <section title='The "$schema" keyword'>
            <section title="Purpose">
                <!-- TODO a custom $schema keyword might also be used to enforce minimum required functionality of a validator -->
                <t>
                    The "$schema" keyword is both used as a JSON Schema version identifier and the
                    location of a resource which is itself a JSON Schema, which describes any schema
                    written for this particular version.
                </t>
                <t>
                    The root schema of a JSON Schema document SHOULD use this keyword.
                    The value of this keyword MUST be a <xref target="RFC3986">URI</xref> (an "absolute" URI),
                    and this URI MUST be normalized.
                    The current schema MUST be valid against the meta-schema identified by this URI.
                </t>
                <t>
                    Values for this property are defined in other documents and by other parties.
                    JSON Schema implementations SHOULD implement support for current and previous published drafts
                    of JSON Schema vocabularies as deemed reasonable.
                </t>
            </section>

        </section>

        <section title="Schema references with $ref">
            <t>
                Any time a subschema is expected, a schema may instead use an object containing a "$ref" property.
                The value of the $ref is a URI Reference. Resolved against the current URI base, it identifies the
                URI of a schema to use.
            </t>
            <t>
                The URI is not a network locator, only an identifier. A schema need not be downloadable from the address
                if it is a network-addressible URL, and implementations MUST NOT assume they should perform a network
                operation when they encounter a network-addressible URI.
            </t>
        </section>

        <section title="Base URI and dereferencing">
            <section title="Initial base URI">
                <t>
                    <xref target="RFC3986">RFC3986 Section 5.1</xref> defines how to determine the default base URI of a document.
                </t>
                <t>
                    Informatively, the initial base URI of a schema is the URI it was found at, or a suitable substitute URI if none is known.
                </t>
            </section>

            <section title='Base URI alteration with the "id" keyword'>
                <t>
                    The "id" keyword defines the URI of the schema and the base URI that other URI references within
                    the schema are resolved against. The "id" keyword itself is resolved against a base URI as
                    specified in [RFC3986].
                </t>
                <t>
                    The value for this keyword MUST be a string, and MUST represent a valid <xref target="RFC3986">URI-reference</xref>.
                    This value SHOULD be normalized, and SHOULD NOT be an empty fragment &lt;#&gt; or an empty string &lt;&gt;.
                </t>
                <t>
                    The root schema of a JSON Schema document SHOULD have an "id" with a valid absolute-URI (containing a scheme, but no fragment).
                </t>
                <t>
                    To facilitate the identification of subschemas in a JSON Schema document,
                    subschemas can use "id" to give themselves a URI with a custom fragment-part.
                    This form of "id" keyword MUST begin with a hash ("#") to identify it as a fragment URI reference,
                    followed by a letter ([A-Za-z]), followed by any number of
                    letters, digits ([0-9]), hyphens ("-"), underscores ("_"), colons (":"), or periods (".").
                    <!-- This restriction is the same one defined by XML -->
                </t>
                <t>
                    For example:
                    <figure>
                        <artwork>
<![CDATA[
{
    "id": "http://example.com/root.json#",
    "definitions": {
        "schema1": { "id": "#foo" },
        "schema2": {
            "id": "other",
            "definitions": {
                "a": { "id": "#bar" },
                "b": { "id": "t/inner" }
            }
        },
        "schema3": {
            "id": "urn:uuid:ee564b8a-7a87-4125-8c96-e9f123d6766f"
        }
    }
}
]]>
                        </artwork>
                    </figure>
                </t>
                <t>
                    Subschemas at the following URI-encoded <xref target="RFC6901">JSON
                    Pointers</xref> (starting from the root schema) have the following
                    base URIs, and are identifiable by either URI:
                </t>
                <t>
                    <list style="hanging">
                        <t hangText="# (document root)">http://example.com/root.json#</t>
                        <t hangText="#/definitions/schema1">http://example.com/root.json#foo</t>
                        <t hangText="#/definitions/schema2">http://example.com/other</t>
                        <t hangText="#/definitions/schema2/definitions/a">http://example.com/other#bar</t>
                        <t hangText="#/definitions/schema2/definitions/b">http://example.com/t/inner</t>
                        <t hangText="#/definitions/schema3">urn:uuid:ee564b8a-7a87-4125-8c96-e9f123d6766f</t>
                    </list>
                </t>
                <section title="Internal references">
                    <t>
                        Schemas can be identified by any URI that has been given to them, including a JSON Pointer or
                        their URI given directly by "id".
                    </t>
                    <t>
                        Tools SHOULD take note of the URIs that schemas, including subschemas, provide for themselves using "id".
                        This is known as "Internal referencing".
                    </t>

                    <t>
                        For example, consider this schema:
                    </t>

                    <figure>
                        <artwork>
<![CDATA[
{
    "id": "http://example.net/root.json#",
    "definitions": {
        "single": {
            "id": "schema1",
            "type": "integer"
        },
    },
    "items": {
        "type": "array",
        "items": { "$ref": "schema1" }
    }
}
]]>
                        </artwork>
                    </figure>
                    <t>
                        When an implementation encounters the &lt;#/definitions/single&gt; schema, it resolves the "id" URI reference
                        against the current base URI to &lt;http://example.net/schema1&gt;.
                    </t>
                    <t>
                        When an implementation then looks inside the &lt;#/items&gt; schema, it encounters the &lt;schema1&gt; reference,
                        and resolves this to &lt;http://example.net/schema1&gt; which is understood as the schema defined elsewhere in the same document.
                    </t>
                </section>
                <section title="External references">
                    <t>
                        To differentiate schemas between each other in a vast ecosystem, schemas are identified by URI.
                        As specified above, this does not necessarially mean anything is downloaded, but instead JSON Schema
                        implementations SHOULD provide ways to import a schema by URI so that other schemas can successfully reference it.
                    </t>
                    <t>
                        Implementations SHOULD be able to associate arbritrary URIs with an arbritrary schema and/or
                        automatically associate a schema's "id"-given URI, depending on the trust that the the validator
                        has in the schema.
                    </t>
                    <t>
                        A schema MAY (and likely will) have multiple URIs, but a URI has no way to identify more than one schema.
                        Validators that try to have multiple schemas associated to the same URI SHOULD raise an error condition.
                    </t>
                </section>
            </section>
        </section>

        <section title="Usage for hypermedia">

            <t>
                One of the largest adoptors of JSON has been HTTP servers for automated APIs and robots.
                This section describes how to enhance processing of JSON documents in a more RESTful manner
                when used with protocols that support media types and <xref target="RFC5988">Web linking</xref>.
            </t>

            <section title='Linking to a schema'>
                <t>
                    It is RECOMMENDED that instances described by a schema/profile provide a link to a downloadable JSON Schema using the link relation "describedby", as defined by <xref target="W3C.REC-ldp-20150226">Linked Data Protocol 1.0, section 8.1</xref>.
                </t>

                <t>
                    In HTTP, such links can be attached to any response using the <xref target="RFC5988">Link header</xref>. An example of such a header would be:
                </t>

                <figure>
                    <artwork>
<![CDATA[
Link: <http://example.com/my-hyper-schema#>; rel="describedby"
]]>
                    </artwork>
                </figure>

            </section>


            <section title='Describing a profile of JSON'>
                <t>
                    Instances MAY specify a "profile" as described in <xref target="RFC6906">The 'profile' Link Relation</xref>.
                    When used as a media-type parameter, HTTP servers gain the ability to perform Content-Type Negotiation based on profile. The media-type parameter MUST be a whitespace-separated list of URIs (i.e. relative references are invalid).
                </t>
                <t>
                    The profile URI is opaque and SHOULD NOT automatically be dereferenced. If the implementation does not understand the semantics of the provided profile, the implementation can instead follow the "describedby" links, if any, which may provide information on how to handle the profile.
                    Since "profile" doesn't necessarily point to a network location, the "describedby" relation is used for linking to a downloadable schema.
                    However, for simplicity, schema authors should make these URIs point to the same resource when possible.
                </t>

                <t>
                    In HTTP, the media-type parameter would be sent inside the Content-Type header:
                </t>

                <figure>
                    <artwork>
<![CDATA[
Content-Type: application/json;
          profile="http://example.com/my-hyper-schema#"
]]>
                    </artwork>
                </figure>

                <t>
                    Multiple profiles are whitespace seperated:
                </t>

                <figure>
                    <artwork>
<![CDATA[
Content-Type: application/json;
          profile="http://example.com/alice http://example.com/bob"
]]>
                    </artwork>
                </figure>

                <t>
                    HTTP can also send the "profile" in a Link, though this may impact media-type semantics and Content-Type negotiation if this replaces the media-type parameter:
                </t>

                <figure>
                    <artwork>
<![CDATA[
Link: </alice>; rel="profile", </bob>; rel="profile"
]]>
                    </artwork>
                </figure>

            </section>

             <section title="Usage over HTTP">
                <t>
                    When used for hypermedia systems over a network, <xref target="RFC7231">HTTP</xref> is frequently the protocol of choice for distributing schemas. Misbehaved clients can pose problems for server maintainers if they pull a schema over the network more frequently than necessary, when it's instead possible to cache a schema for a long period of time.
                </t>
                <t>
                    HTTP servers SHOULD set long-lived caching headers on JSON Schemas.
                    HTTP clients SHOULD observe caching headers and not re-request documents within their freshness period.
                    Distributed systems SHOULD make use of a shared cache and/or caching proxy.
                </t>
                <t>
                    Clients SHOULD set or prepend a User-Agent header specific to the JSON Schema implementation or software product. Since symbols are listed in decreasing order of significance, the JSON Schema library name/version goes first, then the more generic HTTP library name (if any). For example:
                    <figure>
                        <artwork>
<![CDATA[
User-Agent: so-cool-json-schema/1.0.2 curl/7.43.0
]]>
                        </artwork>
                    </figure>
                </t>
                <t>
                    Clients SHOULD be able to make requests with a "From" header so that server operators can contact the owner of a potentially misbehaving script.
                </t>
            </section>

       </section>

        <section title="Security considerations">
            <t>
                Both schemas and instances are JSON values. As such, all security considerations
                defined in <xref target="RFC7159">RFC 7159</xref> apply.
            </t>
            <t>
                Instances and schemas are both frequently witten by untrusted third parties, to be deployed on public Internet servers.
                Validators should take care that the parsing of schemas doesn't consume excessive system resources.
                Validators MUST NOT fall into an infinite loop.
            </t>
            <t>
                Individual JSON Schema vocabularies are liable to also have their own security considerations. Consult the respective specifications for more information.
            </t>
        </section>

        <section title="IANA Considerations">
            <t>
                The proposed MIME media type for JSON Schema is defined as follows:

                <list>
                    <t>type name: application;</t>
                    <t>subtype name: schema+json.</t>
                </list>
            </t>

        </section>
    </middle>

    <back>
        <!-- References Section -->
        <references title="Normative References">
            &RFC2119;
            &RFC3986;
            &RFC7159;
            <reference anchor='W3C.REC-ldp-20150226' target='https://www.w3.org/TR/2015/REC-ldp-20150226/#link-relation-describedby'>
                <front>
                    <title>Linked Data Platform 1.0</title>
                    <author initials='S' surname='Speicher' fullname='Steve Speicher'>
                        <organization>IBM Corporation</organization>
                    </author>
                    <author initials='J' surname='Arwe' fullname='John Arwe'>
                        <organization>IBM Corporation</organization>
                    </author>
                    <author initials='A' surname='Malhotra' fullname='Ashok Malhotra'>
                        <organization>Oracle Corporation</organization>
                    </author>
                    <date month='Feburary' year='2015' />
                </front>
            </reference>
        </references>

        <references title="Informative References">
            &RFC5988;
            &RFC6901;
            &RFC6906;
            &RFC7231;
            <reference anchor="json-schema-validation"
                target="http://tools.ietf.org/html/draft-fge-json-schema-validation-01">
                <front>
                    <title>JSON Schema: interactive and non interactive validation</title>
                    <author initials="F." surname="Galiegue">
                        <organization/>
                    </author>
                    <author initials="G." surname="Court">
                        <organization/>
                    </author>
                    <author initials="K." surname="Zyp">
                        <organization>SitePen (USA)</organization>
                    </author>
                    <date year="2013" month="January"/>
                </front>
            </reference>
            <reference anchor="json-hyper-schema"
                target="http://tools.ietf.org/html/draft-luff-json-hyper-schema-01">
                <front>
                    <title>JSON Hyper-Schema: Hypertext definitions for JSON Schema</title>
                    <author initials="G." surname="Luff">
                        <organization/>
                    </author>
                    <author initials="G." surname="Court">
                        <organization/>
                    </author>
                    <author initials="K." surname="Zyp">
                        <organization>SitePen (USA)</organization>
                    </author>
                    <date year="2013" month="January"/>
                </front>
            </reference>
        </references>

        <section title="ChangeLog">
            <t>
                <list style="hanging">
                    <t hangText="draft-00">
                        <list style="symbols">
                            <t>Initial draft.</t>
                            <t>Salvaged from draft v3.</t>
                            <t>Mandate the use of JSON Reference, JSON Pointer.</t>
                            <t>Define the role of "id". Define URI resolution scope.</t>
                            <t>Add interoperability considerations.</t>
                        </list>
                    </t>
                </list>
            </t>
        </section>
    </back>
</rfc>
