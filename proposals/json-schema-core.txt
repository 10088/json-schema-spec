


Internet Engineering Task Force                            fge. Galiegue
Internet-Draft
Intended status: Informational                               K. Zyp, Ed.
Expires: March 21, 2013                                    SitePen (USA)
                                                                G. Court
                                                      September 17, 2012


               JSON Schema: core definitions and purposes
                            json-schema-core

Abstract

   JSON Schema defines the media type "application/schema+json", a JSON
   based format for defining the structure of JSON data.  JSON Schema
   provides a contract for what JSON data is required for a given
   application and how to interact with it.  JSON Schema is intended to
   define validation, documentation, hyperlink navigation, and
   interaction control of JSON data.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at http://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on March 21, 2013.

Copyright Notice

   Copyright (c) 2012 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (http://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must



Galiegue, et al.         Expires March 21, 2013                 [Page 1]

Internet-Draft                 JSON Schema                September 2012


   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.

Table of Contents

   1.  Introduction . . . . . . . . . . . . . . . . . . . . . . . . .  3
   2.  Conventions and Terminology  . . . . . . . . . . . . . . . . .  3
   3.  Core terminology of JSON Schema  . . . . . . . . . . . . . . .  3
     3.1.  JSON Schema, keywords  . . . . . . . . . . . . . . . . . .  3
     3.2.  Root schema, subschema . . . . . . . . . . . . . . . . . .  3
     3.3.  JSON Schema primitive types  . . . . . . . . . . . . . . .  4
     3.4.  JSON value equality  . . . . . . . . . . . . . . . . . . .  4
     3.5.  Instance . . . . . . . . . . . . . . . . . . . . . . . . .  5
   4.  Overview . . . . . . . . . . . . . . . . . . . . . . . . . . .  5
     4.1.  Design Considerations  . . . . . . . . . . . . . . . . . .  5
   5.  Schema addressing  . . . . . . . . . . . . . . . . . . . . . .  6
     5.1.  Addressing mechanisms and general considerations . . . . .  6
     5.2.  URI of a root schema . . . . . . . . . . . . . . . . . . .  6
     5.3.  Canonical addressing . . . . . . . . . . . . . . . . . . .  6
     5.4.  Inner schema addressing  . . . . . . . . . . . . . . . . .  6
     5.5.  Security considerations  . . . . . . . . . . . . . . . . .  8
   6.  Schema/Instance Association  . . . . . . . . . . . . . . . . .  8
     6.1.  Purpose of this section  . . . . . . . . . . . . . . . . .  8
     6.2.  Recommended correlation mechanisms for use with the
           HTTP protocol  . . . . . . . . . . . . . . . . . . . . . .  8
       6.2.1.  Correlation by means of the "Content-Type" header  . .  8
       6.2.2.  Correlation by means of the "Link" header  . . . . . .  9
   7.  IANA Considerations  . . . . . . . . . . . . . . . . . . . . .  9
   8.  References . . . . . . . . . . . . . . . . . . . . . . . . . .  9
     8.1.  Normative References . . . . . . . . . . . . . . . . . . .  9
     8.2.  Informative References . . . . . . . . . . . . . . . . . .  9
   Appendix A.  ChangeLog . . . . . . . . . . . . . . . . . . . . . . 10


















Galiegue, et al.         Expires March 21, 2013                 [Page 2]

Internet-Draft                 JSON Schema                September 2012


1.  Introduction

   JSON Schema is a JSON media type for defining the structure of JSON
   data.  JSON Schema provides a contract for what JSON data is required
   for a given application and how to interact with it.  JSON Schema is
   intended to define validation, documentation, hyperlink navigation,
   and interaction control of JSON data.

   This document defines the core terminology used by JSON Schema.
   Other linked specifications, which expand on a particular role of
   JSON Schema, will use that terminology.

   This document also defines the mechanisms used for JSON Schema
   identification and referencing.

2.  Conventions and Terminology

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in RFC 2119 [RFC2119].

   The terms "JSON", "JSON text", "JSON value", "member", "element",
   "object", "array", "number", "string", "boolean", "true", "false",
   and "null" in this document are to be interpreted as defined in RFC
   4627 [RFC4627].

3.  Core terminology of JSON Schema

3.1.  JSON Schema, keywords

   A JSON Schema is a JSON document, and that document MUST be an
   object.  Object members of a JSON Schema are called keywords, or
   schema keywords.

   A JSON Schema MAY be empty.

3.2.  Root schema, subschema

   JSON Schemas can be nested, as in this example:


   {
       "title": "root",
       "otherschema": {
           "title": "nested",
           "anotherschema": {
               "title": "alsonested"
           }



Galiegue, et al.         Expires March 21, 2013                 [Page 3]

Internet-Draft                 JSON Schema                September 2012


       }
   }


   In this example, "nested" and "alsonested" are subschemas, and "root"
   is a root schema.

3.3.  JSON Schema primitive types

   JSON Schema defines seven primitive types for JSON values:

   array  A JSON array.

   boolean  A JSON boolean (true or false).

   integer  A JSON number without a decimal part.

   number  Any JSON number.  Number includes integer.

   null  The JSON null value.

   object  A JSON object.

   string  A JSON string.

3.4.  JSON value equality

   Two JSON values are said to be equal if and only if:

      both are nulls; or

      both are booleans or strings, and have the same value; or

      both are numbers, and have the same JSON reprensetation; or

      both are arrays, and:

         have the same number of elements; and

         elements at the same index are equal according to this
         definition; or

      both are objects, and:

         have the same set of members; and

         values for a same member are equal according to this
         definition.



Galiegue, et al.         Expires March 21, 2013                 [Page 4]

Internet-Draft                 JSON Schema                September 2012


   Note about numbers: the two JSON number values, 1.0 and 1, for
   instance, are mathematically equivalent; however they are NOT equal,
   since their JSON representation differs.

3.5.  Instance

   An instance is any JSON value being processed by a JSON Schema.  The
   specification may also refer to an instance as a JSON instance.

4.  Overview

   JSON Schema defines the media type "application/schema+json" for
   describing the structure of JSON instances.  JSON Schemas are
   themselves written in JSON and include facilities for describing the
   structure of JSON in terms of allowable values, descriptions, and
   interpreting relations with other resources.

   JSON Schema serves different purposes, which are summarized below.
   Each purpose has a defined set of keywords which is described in its
   own specification.

   Documentation  JSON Schema can be used to decorate either itself, or
      instances, with descriptive text highlighting the schema's, or
      instance's, purposes.

   Hyperlinking  JSON Schema can be used to associate an instance to a
      Link Description Object, as defined by FIXME.

   Validation  JSON Schema can be used to validate the structure of an
      instance.  Keywords also exist for semantic analysis, although
      implementations are not required to implement them.

4.1.  Design Considerations

   JSON Schema provides a separate format for flexibly communicating how
   a JSON value should be interpreted and/or validated, such that
   clients can properly understand acceptable structures for, and/or
   extract the needed information from, the JSON instance being
   processed.  This information ranges from documentation to external
   resource links, and processing of these links.

   It is acknowledged that JSON values can be of any type defined by the
   JSON specification.  As such, JSON Schema does not mandate that an
   instance be of a particular type: JSON Schema can process any JSON
   value, including null.  It is the domain of JSON Schema validation to
   add useful constraints to the structure and, optionally, semantics,
   of the JSON instance being processed.




Galiegue, et al.         Expires March 21, 2013                 [Page 5]

Internet-Draft                 JSON Schema                September 2012


   JSON Schema is agnostic with regards to both protocols and
   programming languages.  In particular, this means that defining the
   semantics of the client-server interface is dependent on the protocol
   being used.

5.  Schema addressing

5.1.  Addressing mechanisms and general considerations

   JSON Schema defines two addressing mechanisms: canonical addressing,
   and inner schema addressing.  Implementations MUST support canonical
   addressing, and MAY support inner schema addressing.

   Inner schema addressing is done by the means of the "id" keyword.
   The value of this keyword MUST be a string, and this string MUST be a
   valid URI, and MUST be normalized.  When used in a root schema, the
   value of this keyword SHOULD be an absolute URI, and MUST have no
   fragment, or an empty fragment.

5.2.  URI of a root schema

   When a schema is loaded via a URI, the loading URI SHALL be
   considered to be the URI for this schema.  If a schema is loaded
   without a URI:

      if "id" is present in the root schema, and obeys the provisions in
      the previous paragraph, the value of "id" MAY be considered to be
      the schema URI;

      otherwise, it is RECOMMENDED that implementations consider that
      the URI of the schema is either the empty URI, or a URN.

   In addition, implementations MUST consider, for root schema URIs,
   that the URI with no fragment, or an empty fragment, are strictly
   equivalent.

5.3.  Canonical addressing

   Canonical addressing in JSON Schema is done using JSON Reference
   (FIXME_LINK).  As defined by the JSON Reference specification, when
   encountering a JSON Reference, other schema keywords SHALL be
   ignored.

5.4.  Inner schema addressing

   When "id" is encountered in a subschema, implementations MAY resolve
   this URI against the root schema's URI, and consider that the
   canonical URI of this subschema is the calculated URI.  This is



Galiegue, et al.         Expires March 21, 2013                 [Page 6]

Internet-Draft                 JSON Schema                September 2012


   called inner schema addressing.

   There SHOULD NOT be two identical "id" values in the same schema.
   Failing that, subschema lookup using inner schema addressing is
   undefined.

   This schema will be taken as an example:


   {
       "id": "http://x.y.z/rootschema.json#",
       "schema1": {
           "id": "#foo"
       },
       "schema2": {
           "id": "otherschema.json",
           "nested": {
               "id": "#bar"
           },
           "alsonested": {
               "id": t/inner.json#a"
           }
       },
       "schema3": {
           "id": "some://where.else/completely#"
       }
   }


   Subschemas at the following URI-encoded JSON Pointers (starting from
   the root of the schema) have the following URIs:

   # (document root)  http://x.y.z/rootschema.json#

   #/schema1  http://x.y.z/rootschema.json#foo

   #/schema2  http://x.y.z/otherschema.json#

   #/schema2/nested  http://x.y.z/rootschema.json#bar

   #/schema2/alsonested  http://x.y.z/t/inner.json#a

   #/schema3  some://where.else/completely#








Galiegue, et al.         Expires March 21, 2013                 [Page 7]

Internet-Draft                 JSON Schema                September 2012


5.5.  Security considerations

   Inner schema addressing can produce canonical URIs which differ from
   the canonical URI of the root schema.  Implementations MAY choose,
   for security reasons, to ignore inner schema addressing, and always
   dereference canonical URIs.  Schema authors SHALL NOT expect that
   inner schema addressing be used by an implementation.

   Dereferencing canonical URIs MAY fail to complete, or MAY lead to
   content which is not a JSON Schema (another type of JSON value, or
   not a JSON value).  It is RECOMMENDED that JSON Schema processing be
   stopped in such a situation.

6.  Schema/Instance Association

6.1.  Purpose of this section

   A JSON instance MAY be correlated to one, or even several, JSON
   Schemas.  This correlation MAY be embodied witin existing protocol
   headers.

   In addition, if the protocol also carries media type information (by
   means, for instance, of a "Content-Type" header), an instance MUST be
   one of "application/json" or any other subtype.

   Should the scenario above be inapplicable, due either to the absence
   of, or restrictions on, protocol headers, such a correlation is out
   of the normative scope of this specification.

6.2.  Recommended correlation mechanisms for use with the HTTP protocol

   It is acknowledged by this specification that the majority of
   interactive JSON Schema processing will be over HTTP.  This section
   therefore gives recommendations for materializing an instance/schema
   correlation using mechanisms currently available for this protocol.

6.2.1.  Correlation by means of the "Content-Type" header

   It is RECOMMENDED that a MIME type parameter by the name of "profile"
   be appended to the "Content-Type" header of the instance being
   processed.  If present, the value of this parameter MUST be a valid
   URI, and this URI SHOULD resolve to a valid JSON Schema.

   An example of such a header would be:


   Content-Type: application/my-media-type+json;
                 profile=http://example.com/my-hyper-schema



Galiegue, et al.         Expires March 21, 2013                 [Page 8]

Internet-Draft                 JSON Schema                September 2012


6.2.2.  Correlation by means of the "Link" header

   When using the "Link" header, it is RECOMMENDED that a relationship
   by the name "describedBy" be used, as defined by RFC 2048, section
   19.6.2.4 (FIXME: make real link).  Note: it should be remembered that
   relationship values are case insensitive, so "describedBy" is just as
   valid a relationship as "DESCRIBEDBY".

   The target URI of the "Link" header SHOULD be a valid JSON Schema.

   An example of such a header would be:


   Link: <http://example.com/my-hyper-schema>; rel="describedBy"


7.  IANA Considerations

   The proposed MIME media type for JSON Schema is defined as follows:

      type name: application;

      subtype name: schema+json;

      required parameters: profile.

      FIXME: fragment resolution?

8.  References

8.1.  Normative References

   [RFC2119]       Bradner, S., "Key words for use in RFCs to Indicate
                   Requirement Levels", BCP 14, RFC 2119, March 1997.

   [json-pointer]  Bryan, P. and K. Zyp, "JSON Pointer", October 2011, <
                   http://tools.ietf.org/html/
                   draft-ietf-appsawg-json-pointer-04>.

8.2.  Informative References

   [RFC4627]       Crockford, D., "The application/json Media Type for
                   JavaScript Object Notation (JSON)", RFC 4627,
                   July 2006.







Galiegue, et al.         Expires March 21, 2013                 [Page 9]

Internet-Draft                 JSON Schema                September 2012


Appendix A.  ChangeLog

   TODO

Authors' Addresses

   Francis Galiegue

   EMail: fgaliegue@gmail.com


   Kris Zyp (editor)
   SitePen (USA)
   530 Lytton Avenue
   Palo Alto, CA 94301
   USA

   Phone: +1 650 968 8787
   EMail: kris@sitepen.com


   Gary Court
   Calgary, AB
   Canada

   EMail: gary.court@gmail.com

























Galiegue, et al.         Expires March 21, 2013                [Page 10]

