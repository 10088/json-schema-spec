


Internet Engineering Task Force                            fge. Galiegue
Internet-Draft
Intended status: Informational                               K. Zyp, Ed.
Expires: March 27, 2013                                    SitePen (USA)
                                                                G. Court
                                                      September 23, 2012


        JSON Schema: interactive and non interactive validation
                         json-schema-validation

Abstract

   JSON Schema (application/schema+json) has several purposes, one of
   which is instance validation.  The validation process may be
   interactive or non interactive.  For instance, applications may use
   JSON Schema to build a user interface enabling interactive content
   generation in addition to user input checking, or validate data
   retrieved from various sources.  This specification describes schema
   keywords dedicated to validation purposes.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at http://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on March 27, 2013.

Copyright Notice

   Copyright (c) 2012 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (http://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect



Galiegue, et al.         Expires March 27, 2013                 [Page 1]

Internet-Draft                 JSON Schema                September 2012


   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.

Table of Contents

   1.  Introduction . . . . . . . . . . . . . . . . . . . . . . . . .  4
   2.  Conventions and Terminology  . . . . . . . . . . . . . . . . .  4
   3.  Interoperability considerations  . . . . . . . . . . . . . . .  4
     3.1.  Validation of string instances . . . . . . . . . . . . . .  4
     3.2.  Validation of numeric instances  . . . . . . . . . . . . .  4
     3.3.  Regular expressions  . . . . . . . . . . . . . . . . . . .  5
   4.  General validation considerations  . . . . . . . . . . . . . .  5
     4.1.  Keywords and instance primitive types  . . . . . . . . . .  5
     4.2.  Inter-dependent keywords . . . . . . . . . . . . . . . . .  6
     4.3.  Default values for missing keywords  . . . . . . . . . . .  6
     4.4.  Validation of container instances  . . . . . . . . . . . .  6
   5.  Validation keywords sorted by instance types . . . . . . . . .  6
     5.1.  Validation keywords for numeric instances (number and
           integer) . . . . . . . . . . . . . . . . . . . . . . . . .  6
       5.1.1.  multipleOf . . . . . . . . . . . . . . . . . . . . . .  6
       5.1.2.  maximum and exclusiveMaximum . . . . . . . . . . . . .  7
       5.1.3.  minimum and exclusiveMinimum . . . . . . . . . . . . .  7
     5.2.  Validation keywords for strings  . . . . . . . . . . . . .  8
       5.2.1.  maxLength  . . . . . . . . . . . . . . . . . . . . . .  8
       5.2.2.  minLength  . . . . . . . . . . . . . . . . . . . . . .  8
       5.2.3.  pattern  . . . . . . . . . . . . . . . . . . . . . . .  8
     5.3.  Validation keywords for arrays . . . . . . . . . . . . . .  9
       5.3.1.  additionalItems and items  . . . . . . . . . . . . . .  9
       5.3.2.  maxItems . . . . . . . . . . . . . . . . . . . . . . . 10
       5.3.3.  minItems . . . . . . . . . . . . . . . . . . . . . . . 10
       5.3.4.  uniqueItems  . . . . . . . . . . . . . . . . . . . . . 11
     5.4.  Validation keywords for objects  . . . . . . . . . . . . . 11
       5.4.1.  maxProperties  . . . . . . . . . . . . . . . . . . . . 11
       5.4.2.  minProperties  . . . . . . . . . . . . . . . . . . . . 12
       5.4.3.  required . . . . . . . . . . . . . . . . . . . . . . . 12
       5.4.4.  additionalProperties, properties and
               patternProperties  . . . . . . . . . . . . . . . . . . 12
       5.4.5.  dependencies . . . . . . . . . . . . . . . . . . . . . 14
     5.5.  Validation keywords for any instance type  . . . . . . . . 15
       5.5.1.  enum . . . . . . . . . . . . . . . . . . . . . . . . . 15
       5.5.2.  type . . . . . . . . . . . . . . . . . . . . . . . . . 15
       5.5.3.  allOf  . . . . . . . . . . . . . . . . . . . . . . . . 15
       5.5.4.  anyOf  . . . . . . . . . . . . . . . . . . . . . . . . 16
       5.5.5.  oneOf  . . . . . . . . . . . . . . . . . . . . . . . . 16
       5.5.6.  not  . . . . . . . . . . . . . . . . . . . . . . . . . 16
   6.  Metadata keywords  . . . . . . . . . . . . . . . . . . . . . . 17



Galiegue, et al.         Expires March 27, 2013                 [Page 2]

Internet-Draft                 JSON Schema                September 2012


     6.1.  "title" and "description"  . . . . . . . . . . . . . . . . 17
       6.1.1.  Valid values . . . . . . . . . . . . . . . . . . . . . 17
       6.1.2.  Purpose  . . . . . . . . . . . . . . . . . . . . . . . 17
     6.2.  "default"  . . . . . . . . . . . . . . . . . . . . . . . . 17
       6.2.1.  Valid values . . . . . . . . . . . . . . . . . . . . . 17
       6.2.2.  Purpose  . . . . . . . . . . . . . . . . . . . . . . . 17
   7.  Semantic validation with "format"  . . . . . . . . . . . . . . 17
     7.1.  Foreword . . . . . . . . . . . . . . . . . . . . . . . . . 17
     7.2.  Implementation requirements  . . . . . . . . . . . . . . . 18
     7.3.  Defined attributes . . . . . . . . . . . . . . . . . . . . 18
       7.3.1.  date-time  . . . . . . . . . . . . . . . . . . . . . . 18
       7.3.2.  email  . . . . . . . . . . . . . . . . . . . . . . . . 18
       7.3.3.  hostname . . . . . . . . . . . . . . . . . . . . . . . 19
       7.3.4.  ipv4 . . . . . . . . . . . . . . . . . . . . . . . . . 19
       7.3.5.  ipv6 . . . . . . . . . . . . . . . . . . . . . . . . . 19
       7.3.6.  uri  . . . . . . . . . . . . . . . . . . . . . . . . . 19
   8.  Calculating child instances' schema(s) . . . . . . . . . . . . 20
     8.1.  Foreword . . . . . . . . . . . . . . . . . . . . . . . . . 20
     8.2.  Array elements . . . . . . . . . . . . . . . . . . . . . . 20
       8.2.1.  Defining characteristic  . . . . . . . . . . . . . . . 20
       8.2.2.  Implied keywords and default values. . . . . . . . . . 20
       8.2.3.  Calculation  . . . . . . . . . . . . . . . . . . . . . 20
     8.3.  Object values  . . . . . . . . . . . . . . . . . . . . . . 21
       8.3.1.  Defining characteristic  . . . . . . . . . . . . . . . 21
       8.3.2.  Implied keywords . . . . . . . . . . . . . . . . . . . 21
       8.3.3.  Calculation  . . . . . . . . . . . . . . . . . . . . . 21
   9.  IANA Considerations  . . . . . . . . . . . . . . . . . . . . . 22
   10. References . . . . . . . . . . . . . . . . . . . . . . . . . . 22
     10.1. Normative References . . . . . . . . . . . . . . . . . . . 22
     10.2. Informative References . . . . . . . . . . . . . . . . . . 22
   Appendix A.  ChangeLog . . . . . . . . . . . . . . . . . . . . . . 23




















Galiegue, et al.         Expires March 27, 2013                 [Page 3]

Internet-Draft                 JSON Schema                September 2012


1.  Introduction

   JSON Schema can be used to require that a given JSON document (an
   instance) satisfies a certain number of criteria.  These criteria are
   materialized by a set of keywords which are described in this
   specification.  In addition, a set of keywords is defined to assist
   in interactive instance generation.  Those are also described in this
   specification.

   Validation is primarily concerned about structural validation of
   instances.  Keywords also exist to perform semantic analysis;
   however, support for these keywords is optional.

   This specification will use the terminology defined by the JSON
   Schema core specification.  It is advised that readers have a copy of
   this specification.

2.  Conventions and Terminology

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in RFC 2119 [RFC2119].

   This specification uses the term "container instance" to refer to
   both array and object instances.  It uses the term "children
   instances" to refer to array elements or object member values.

   This specification uses the term "member set" for an object instance
   as the set of its member names; for instance, the member set of
   object value { "a": 1, "b": 2 } is [ "a", "b" ].

3.  Interoperability considerations

3.1.  Validation of string instances

   It should be noted that the null character (\x00) is a valid
   character in a JSON string.  An instance to validate may contain a
   string value with this character, regardless of the ability of the
   underlying programming language to deal with such data.

3.2.  Validation of numeric instances

   The JSON specification does not define any bounds to the scale or
   precision of numeric values.  JSON Schema does not define any such
   bounds either.  This means that numeric instances processed by JSON
   Schema can be arbitrarily large and/or have an arbitrarily large
   decimal part, regardless of the ability of the underlying programming
   language to deal with such data.



Galiegue, et al.         Expires March 27, 2013                 [Page 4]

Internet-Draft                 JSON Schema                September 2012


3.3.  Regular expressions

   Two validation keywords, "pattern" and "patternProperties", use
   regular expressions as a part of validation mechanics.  These regular
   expressions SHOULD be valid according to the ECMA 262 [ecma262]
   regular expression dialect.

   Implementations MUST NOT consider that regular expressions are
   anchored, neither at the beginning nor at the end.  This means, for
   instance, that "es" matches "expression".

   Regular expression dialects vary, sometimes widely, between
   programming languages, to the extent that a same commonly used
   regular expression token may behave differently between programming
   languages.  For this reason, if regular expressions are used in a
   schema meant to be processed by peer implementations, it is
   RECOMMENDED that schema authors limit themselves to the following
   regular expression tokens:

      individual Unicode characters, as defined by the JSON RFC
      [RFC4627];

      simple character classes ([abc]), range character classes ([a-z]);

      complemented character classes ([^abc], [^a-z]);

      quantifiers: "+" (one or more), "*" (zero or more), "?" (zero or
      one), "{x}" where "x" is an integer (exactly x occurrences),
      "{x,y}" where "x" and "y" are integers (at least x, at most y,
      occurrences);

      the beginning-of-input ("^") and end-of-input ("$") anchors;

      grouping ("(...)") and alternation ("|").

   Schema authors choosing to use other regular expression features in
   their schemas SHOULD NOT expect peer implementations to support these
   features.  Should an implementation fail to correctly interpret a
   regular expression, it is RECOMMENDED that JSON Schema processing be
   considered a failure.

4.  General validation considerations

4.1.  Keywords and instance primitive types

   Some validation keywords only apply to one or more primitive types.
   When the primitive type of the instance cannot be validated by a
   given keyword, validation for this keyword and instance SHOULD



Galiegue, et al.         Expires March 27, 2013                 [Page 5]

Internet-Draft                 JSON Schema                September 2012


   succeed.

   This specification groups keywords in different sections, according
   to the primitive type, or types, these keywords validate.  Note that
   some keywords validate all instance types.

4.2.  Inter-dependent keywords

   In order to validate an instance, some keywords are influenced by the
   presence (or absence) of other keywords.  In this case, all these
   keywords will be grouped in the same section.

4.3.  Default values for missing keywords

   Some keywords, if absent, MAY be regarded by implementations as
   having a default value.  In this case, the default value will be
   mentioned.

4.4.  Validation of container instances

   Keywords with the possibility to validate container instances only
   validate this instance's structure, not this instance's children.
   Some of these keywords do, however, contain information which is
   necessary for calculating which schema(s) a child instance must be
   valid against.  The algorithms to calculate a child instance's
   relevant schema(s) are explained in a separate section.

   It should be noted that while an array element will only have to
   validate against one schema, object member values may have to
   validate against more than one schema.

5.  Validation keywords sorted by instance types

5.1.  Validation keywords for numeric instances (number and integer)

5.1.1.  multipleOf

5.1.1.1.  Valid values

   The value for this keyword MUST be a JSON number.  This number MUST
   be strictly greater than 0.

5.1.1.2.  Conditions for successful validation

   A numeric instance is valid against "multipleOf" if and only if the
   result of the division of the instance by this keyword's value is an
   integer.




Galiegue, et al.         Expires March 27, 2013                 [Page 6]

Internet-Draft                 JSON Schema                September 2012


5.1.2.  maximum and exclusiveMaximum

5.1.2.1.  Valid values

   The value for the "maximum" keyword MUST be a JSON number.  The value
   for the "exclusiveMaximum" keyword MUST be a boolean.

   If "exclusiveMaximum" is present, "maximum" MUST also be present.

5.1.2.2.  Conditions for successful validation

   Successful validation depends on the presence and value of
   "exclusiveMaximum":

      if "exclusiveMaximum" is not present, or has boolean value false,
      then the instance is valid if and only if it is lower than, or
      equal to, the value of "maximum";

      if "exclusiveMaximum" is present and has boolean value true, the
      the instance is valid if and only if it is strictly lower than the
      value of "maximum".

5.1.2.3.  Default value

   "exclusiveMaximum", if absent, may be considered as being present
   with boolean value false.

5.1.3.  minimum and exclusiveMinimum

5.1.3.1.  Valid values

   The value for the "minimum" keyword MUST be a JSON number.  The value
   for the "exclusiveMinimum" keyword MUST be a boolean.

   If "exclusiveMinimum" is present, "minimum" MUST also be present.

5.1.3.2.  Conditions for successful validation

   Successful validation depends on the presence and value of
   "exclusiveMinimum":

      if "exclusiveMinimum" is not present, or has boolean value false,
      then the instance is valid if and only if it is greater than, or
      equal to, the value of "minimum";

      if "exclusiveMinimum" is present and has boolean value true, the
      the instance is valid if and only if it is strictly greater than
      the value of "minimum".



Galiegue, et al.         Expires March 27, 2013                 [Page 7]

Internet-Draft                 JSON Schema                September 2012


5.1.3.3.  Default value

   "exclusiveMinimum", if absent, may be considered as being present
   with boolean value false.

5.2.  Validation keywords for strings

5.2.1.  maxLength

5.2.1.1.  Valid values

   The value for this keyword MUST be an integer.  This integer MUST be
   greater than, or equal to, 0.

5.2.1.2.  Conditions for successful validation

   A string instance is valid against this keyword if and only if its
   length is less than, or equal to, the value of this keyword.

   The length of a string instance is defined as the number of its
   characters as defined by RFC 4627 [RFC4627].

5.2.2.  minLength

5.2.2.1.  Valid values

   The value for this keyword MUST be an integer.  This integer MUST be
   greater than, or equal to, 0.

5.2.2.2.  Conditions for successful validation

   A string instance is valid against this keyword if and only if its
   length is greater than, or equal to, the value of this keyword.

   The length of a string instance is defined as the number of its
   characters as defined by RFC 4627 [RFC4627].

5.2.2.3.  Default value

   "minLength", if absent, may be considered as being present with
   integer value 0.

5.2.3.  pattern

5.2.3.1.  Valid values

   The value for this keyword MUST be a string.  This string SHOULD be a
   valid regular expression, according to the ECMA 262 regular



Galiegue, et al.         Expires March 27, 2013                 [Page 8]

Internet-Draft                 JSON Schema                September 2012


   expression dialect.

5.2.3.2.  Conditions for successful validation

   A string instance is considered valid if and only if the regular
   expression matches the instance successfully.

5.3.  Validation keywords for arrays

5.3.1.  additionalItems and items

5.3.1.1.  Valid values

   The value of "additionalItems" MUST be either a boolean or an object.
   If it is an object, this object MUST be a valid JSON Schema.

   The item keyword's value MUST be either an object or an array.  If it
   is an object, this object MUST be a valid JSON Schema.  If it is an
   array, elements of this array MUST be objects, and each of these
   objects MUST be a valid JSON Schema.

5.3.1.2.  Conditions for successful validation

   Successful validation of an array instance with regards to these two
   keywords is determined as follows:

      if "items" is not present, or its value is an object, validation
      of the instance always succeeds, regardless of the value of
      "additionalItems";

      if the value of "additionalItems" is boolean value true or an
      object, validation of the instance always succeeds;

      if the value of additionalItems is boolean value false and the
      value of items is an array (which is must be at this point), the
      instance is valid if and only if its number of elements is less
      than, or equal to, the number of elements in the array value of
      items.

5.3.1.3.  Example

   The following example covers the case where "additionalItems" has
   boolean value false and "items" has an array value, since this is the
   only situation under which an instance may fail to validate
   successfully.






Galiegue, et al.         Expires March 27, 2013                 [Page 9]

Internet-Draft                 JSON Schema                September 2012


   This is an example schema:


   {
       "items": [ {}, {}, {} ],
       "additionalItems": false
   }


   With this schema, the following instances are valid:

      [] (an empty array),

      [ [ 1, 2, 3, 4 ], [ 5, 6, 7, 8 ] ],

      [ 1, 2, 3 ];

   the following instances are invalid:

      [ 1, 2, 3, 4 ],

      [ null, { "a": "b" }, true, 31.000002020013 ]

5.3.1.4.  Default values

   If either keyword is absent, it may be considered present with an
   empty schema.

5.3.2.  maxItems

5.3.2.1.  Valid values

   The value for this keyword MUST be an integer.  This integer MUST be
   greater than, or equal to, 0.

5.3.2.2.  Conditions for successful validation

   An array instance is valid against "maxItems" if and only if its
   number of elements is less than, or equal to, the value of this
   keyword.

5.3.3.  minItems

5.3.3.1.  Valid values

   The value for this keyword MUST be an integer.  This integer MUST be
   greater than, or equal to, 0.




Galiegue, et al.         Expires March 27, 2013                [Page 10]

Internet-Draft                 JSON Schema                September 2012


5.3.3.2.  Conditions for successful validation

   An array instance is valid against "minItems" if and only if its
   number of elements is greater than, or equal to, the value of this
   keyword.

5.3.3.3.  Default value

   If this keyword is not present, it may be considered present with a
   value of 0.

5.3.4.  uniqueItems

5.3.4.1.  Valid values

   The value of this keyword MUST be a boolean.

5.3.4.2.  Conditions for successful validation

   If this keyword has boolean value false, the instance validates
   successfully.  If it has boolean value true, the instance validates
   successfully if and only if all of its elements are unique.  In other
   words, no two elements of the array instance should be equal as per
   the definition in FIXME_LINK.

5.3.4.3.  Default value

   If not present, this keyword may be considered present with boolean
   false as a value.

5.4.  Validation keywords for objects

5.4.1.  maxProperties

5.4.1.1.  Valid values

   The value for this keyword MUST be an integer.  This integer MUST be
   greater than, or equal to, 0.

5.4.1.2.  Conditions for successful validation

   An object instance is valid against "maxProperties" if and only if
   its number of members is less than, or equal to, the value of this
   keyword.







Galiegue, et al.         Expires March 27, 2013                [Page 11]

Internet-Draft                 JSON Schema                September 2012


5.4.2.  minProperties

5.4.2.1.  Valid values

   The value for this keyword MUST be an integer.  This integer MUST be
   greater than, or equal to, 0.

5.4.2.2.  Conditions for successful validation

   An object instance is valid against "minProperties" if and only if
   its number of members is greater than, or equal to, the value of this
   keyword.

5.4.2.3.  Default value

   If this keyword is not present, it may be considered present with a
   value of 0.

5.4.3.  required

5.4.3.1.  Valid values

   The value for this keyword MUST be an array.  This array MUST have at
   least one element.  Elements of this array MUST be strings, and MUST
   be unique.

5.4.3.2.  Conditions for successful validation

   An object instance is valid against this keyword if and only if its
   member set contains all elements in this keyword's array.

5.4.4.  additionalProperties, properties and patternProperties

5.4.4.1.  Valid values

   The value of "additionalProperties" MUST be a boolean or an object.
   If it is an object, it MUST also be a valid JSON Schema.

   The value of "properties" MUST be an object.  Each value of this
   object MUST be an object, and each object MUST be a valid JSON
   Schema.

   The value of "patternProperties" MUST be an object.  Each member name
   of this object SHOULD be a valid regular expression, according to the
   ECMA 262 regular expression dialect.  Each value of this object MUST
   be an object, and each object MUST be a valid JSON Schema.





Galiegue, et al.         Expires March 27, 2013                [Page 12]

Internet-Draft                 JSON Schema                September 2012


5.4.4.2.  Conditions for successful validation

   Successful validation of an object instance against these three
   keywords depends on the value of "additionalProperties":

      if its value is boolean true or a schema, validation succeeds;

      if its value is boolean false, the algorithm to determine
      validation success is described below.

5.4.4.3.  Default values

   If either "properties" or "patternProperties" are absent, they can be
   considered present with an empty object as a value (NOTE: an empty
   object, NOT an empty schema).

   If "additionalProperties" is absent, it may be considered present
   with an empty schema as a value.

5.4.4.4.  If "additionalProperties" has boolean value false

   In this case, validation of the instance depends on the member set of
   "properties" and "patternProperties".  In this section, the elements
   of "patternProperties"' member set will be called regexes for
   convenience.

   The first step is to collect the following sets:

   s  The member set of the instance to validate.

   p  The member set from "properties".

   pp The member set from "patternProperties".

   Having collected these three sets, the process is as follows:

      remove from "s" all elements of "p", if any;

      for each regex in "pp", remove all elements of "s" which this
      regex matches.

   Validation of the instance succeeds if and only if, after these two
   steps, set "s" is empty.

5.4.4.5.  Example

   This schema will be used as an example:




Galiegue, et al.         Expires March 27, 2013                [Page 13]

Internet-Draft                 JSON Schema                September 2012


   {
       "properties": {
           "p1": {}
       },
       "patternProperties": {
           "p": {},
           "[0-9]": {}
       }
   }


   This is the instance to validate:


   {
       "p1": true,
       "p2": null,
       "a32&o": "foobar",
       "": [],
       "finance": "ruins",
       "apple": "pie"
   }


   The three sets are:

   s  { "p1", "p2", "a32&o", "", "finance", "apple" }

   p  { "p1" }

   pp { "p", "[0-9]" }

   Applying the two steps of the algorithm:

      after the first step, "p1" is removed from "s";

      after the second step, "p2" (matched by "p"), "a32&o" (matched by
      "[0-9]") and "apple" (matched by "p") are removed from "s".

   The set still contains two elements, "" and "finance".  Validation
   therefore fails.

5.4.5.  dependencies

5.4.5.1.  Valid values

   This keyword's value MUST be an object.  This object MUST be a valid
   JSON Schema.



Galiegue, et al.         Expires March 27, 2013                [Page 14]

Internet-Draft                 JSON Schema                September 2012


5.4.5.2.  Conditions for successful validation

   For each element in the object instance's member set, if
   "dependencies" contains a member by the same name, the object
   instance must validate successfully against the matching schema in
   "dependencies".

   Note that this is the object instance itself which must validate
   successfully, not the value associated with that member.

5.5.  Validation keywords for any instance type

5.5.1.  enum

5.5.1.1.  Valid values

   The value of this keyword MUST be an array.  This array MUST have at
   least one element.  Elements in the array MUST be unique.

   Elements in the array MAY be of any type, including null.

5.5.1.2.  Conditions for successful validation

   An instance validates successfully against this keyword if and only
   if its value is equal to one of the elements in this keyword's array
   value.

5.5.2.  type

5.5.2.1.  Valid values

   The value of this keyword MUST be a string.  The value of this string
   MUST be one of the seven primitive types defined by FIXME_LINK.

5.5.2.2.  Conditions for successful validation

   An instance matches successfully if and only if its primitive type is
   the one defined by the value of this keyword.  Recall: "number"
   includes "integer".

5.5.3.  allOf

5.5.3.1.  Valid values

   This keyword's value MUST be an array.  This array MUST have at least
   one element.

   Elements of the array MUST be objects.  Each object MUST be a valid



Galiegue, et al.         Expires March 27, 2013                [Page 15]

Internet-Draft                 JSON Schema                September 2012


   JSON Schema.

5.5.3.2.  Conditions for successful validation

   An instance validates successfully against this keyword if and only
   if it validates successfully against all schemas defined by this
   keyword's value.

5.5.4.  anyOf

5.5.4.1.  Valid values

   This keyword's value MUST be an array.  This array MUST have at least
   one element.

   Elements of the array MUST be objects.  Each object MUST be a valid
   JSON Schema.

5.5.4.2.  Conditions for successful validation

   An instance validates successfully against this keyword if and only
   if it validates successfully against at least one defined by this
   keyword's value.

5.5.5.  oneOf

5.5.5.1.  Valid values

   This keyword's value MUST be an array.  This array MUST have at least
   one element.

   Elements of the array MUST be objects.  Each object MUST be a valid
   JSON Schema.

5.5.5.2.  Conditions for successful validation

   An instance validates successfully against this keyword if and only
   if it validates successfully against exactly one schema defined by
   this keyword's value.

5.5.6.  not

5.5.6.1.  Valid values

   This keyword's value MUST be an object.  This object MUST be a valid
   JSON Schema.





Galiegue, et al.         Expires March 27, 2013                [Page 16]

Internet-Draft                 JSON Schema                September 2012


5.5.6.2.  Conditions for successful validation

   An instance is valid against this keyword if and only if it fails to
   validate successfully against the schema defined by this keyword.

6.  Metadata keywords

6.1.  "title" and "description"

6.1.1.  Valid values

   The value for both of these keywords MUST be a string.

6.1.2.  Purpose

   Both of these keywords can be used to decorate a user interface with
   information about the data produced by this user interface.  A title
   will preferrably be short, whereas a description will provide
   explanation about the purpose of the produced value associated with
   this schema.

   Both of these keywords MAY be used in root schemas, and in any
   subschemas.

6.2.  "default"

6.2.1.  Valid values

   There are no restrictions placed on the value of this keyword.

6.2.2.  Purpose

   This keyword can be used to substitute a default value for the
   production of a user interface.  It is RECOMMENDED that a default
   value be valid against the associated schema.

   This keyword MAY be used in root schemas, and in any subschemas.

7.  Semantic validation with "format"

7.1.  Foreword

   Structural validation alone may be insufficient to validate that an
   instance meets all the requirements of an application.  The "format"
   keyword is defined to allow interoperable semantic validation for a
   fixed subset of values which are accurately described by
   authoritative resources, be they RFCs or other external
   specifications.



Galiegue, et al.         Expires March 27, 2013                [Page 17]

Internet-Draft                 JSON Schema                September 2012


   The value of this keyword MUST be a string.  This value is called a
   format attribute.  A format attribute can generally only validate a
   given set of instance types.  If the type of the instance to validate
   is not in this set, validation for this format attribute and instance
   SHOULD succeed.

7.2.  Implementation requirements

   Implementations MAY support the "format" keyword.  They MAY implement
   part of, or all, of the format attributes defined below.  They MUST
   implement validation for defined attributes according to their
   definitions.

   Implementations MAY add custom format attributes.  Format attributes
   SHOULD NOT be defined to validate container instances.  Save for
   agreement between parties, schema authors SHALL NOT expect that a
   peer implementation has support for a given attribute, or even for
   the "format" keyword altogether.

7.3.  Defined attributes

7.3.1.  date-time

7.3.1.1.  Applicability

   This attribute applies to string instances.

7.3.1.2.  Validation

   A string instance is valid against this attribute if and only if it
   is a valid date representation as defined by RFC 3339, section 5.6
   [RFC3339].

7.3.2.  email

7.3.2.1.  Applicability

   This attribute applies to string instances.

7.3.2.2.  Validation

   A string instance is valid against this attribute if and only if it
   is a valid Internet email address as defined by RFC 5322, section
   3.4.1 [RFC5322].







Galiegue, et al.         Expires March 27, 2013                [Page 18]

Internet-Draft                 JSON Schema                September 2012


7.3.3.  hostname

7.3.3.1.  Applicability

   This attribute applies to string instances.

7.3.3.2.  Validation

   A string instance is valid against this attribute if and only if it
   is a valid representation for an Internet host name, as defined by
   RFC 1034, section 3.1 [RFC1034].

7.3.4.  ipv4

7.3.4.1.  Applicability

   This attribute applies to string instances.

7.3.4.2.  Validation

   A string instance is valid against this attribute if and only if it
   is a valid representation of an IPv4 address according to the
   "dotted-quad" ABNF syntax as defined in RFC 2673, section 3.2
   [RFC2673].

7.3.5.  ipv6

7.3.5.1.  Applicability

   This attribute applies to string instances.

7.3.5.2.  Validation

   A string instance is valid against this attribute if and only if it
   is a valid representation of an IPv6 address as defined in RFC 2373,
   section 2.2 [RFC2373].

7.3.6.  uri

7.3.6.1.  Applicability

   This attribute applies to string instances.

7.3.6.2.  Validation

   A string instance is valid against this attribute if and only if it
   is a valid URI, according to [RFC3986].




Galiegue, et al.         Expires March 27, 2013                [Page 19]

Internet-Draft                 JSON Schema                September 2012


8.  Calculating child instances' schema(s)

8.1.  Foreword

   Calculating the schema, or schemas, a child instance must validate
   against is influenced by the following:

      the container instance type;

      the child instance's defining characteristic in the container
      instance;

      the value of keywords implied in the calculation.

   In addition, it is important that if one or more keyword(s) implied
   in the calculation are not defined, it be considered present with its
   default value, which will be recalled in this section.

8.2.  Array elements

8.2.1.  Defining characteristic

   The defining characteristic of the child instance is this instance's
   index in the array instance.  Recall: array indices start at 0.

8.2.2.  Implied keywords and default values.

   The two implied keywords in this calculation are "items" and
   "additionalItems".

   If either keyword is absent, it is considered present with an empty
   schema as a value.  In addition, boolean value true for
   "additionalItems" is considered equivalent to an empty schema.

8.2.3.  Calculation

8.2.3.1.  If "items" is a schema

   If items is a schema, then the child instance must be valid against
   this schema, regardless of its index, and regardless of the value of
   "additionalItems".

8.2.3.2.  If "items" is an array

   In this situation, the schema depends on the index of the child
   instance:





Galiegue, et al.         Expires March 27, 2013                [Page 20]

Internet-Draft                 JSON Schema                September 2012


      if the index is less than, or equal to, the maximum index in the
      "items" array, then the child instance must be valid against the
      corresponding schema in the "items" array;

      otherwise, it must be valid against the schema defined by
      "additionalItems".

8.3.  Object values

8.3.1.  Defining characteristic

   The defining characteristic of the child instance of an object is the
   member name this child is associated to.

8.3.2.  Implied keywords

   The three keywords implied in this calculation are "properties",
   "patternProperties" and "additionalProperties".

   If "properties" of "patternProperties" are absent, they are
   considered present with an empty object as a value (note, an empty
   object, NOT an empty schema).

   If "additionalProperties" is absent, it is considered present with an
   empty schema as a value.  In addition, boolean value true is
   considered equivalent to an empty schema.

8.3.3.  Calculation

8.3.3.1.  Names used in this calculation

   The calculation below uses the following names:

   m  The member name the child instance is associated to.

   p  The member set from "properties".

   pp The member set from "patternProperties".  Elements of this set
      will be called regexes for convenience.

   s  The set of schemas for the child instance.

8.3.3.2.  First step: schemas in "properties"

   If set "p" contains value "m", then the corresponding schema in
   "properties" is added to "s".





Galiegue, et al.         Expires March 27, 2013                [Page 21]

Internet-Draft                 JSON Schema                September 2012


8.3.3.3.  Second step: schemas in "patternProperties"

   For each regex in "pp", if it matches "m" successfully, the
   corresponding schema in "patternProperties" is added to "s".

8.3.3.4.  Third step: "additionalProperties"

   The schema defined by "additionalProperties" is added to "s" if and
   only if, at this stage, "s" is empty.

9.  IANA Considerations

   This specification does not have any influence with regards to IANA.

10.  References

10.1.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119, March 1997.

10.2.  Informative References

   [RFC1034]  Mockapetris, P., "Domain names - concepts and facilities",
              STD 13, RFC 1034, November 1987.

   [RFC2373]  Hinden, R. and S. Deering, "IP Version 6 Addressing
              Architecture", RFC 2373, July 1998.

   [RFC2673]  Crawford, M., "Binary Labels in the Domain Name System",
              RFC 2673, August 1999.

   [RFC3339]  Klyne, G., Ed. and C. Newman, "Date and Time on the
              Internet: Timestamps", RFC 3339, July 2002.

   [RFC3986]  Berners-Lee, T., Fielding, R., and L. Masinter, "Uniform
              Resource Identifier (URI): Generic Syntax", STD 66,
              RFC 3986, January 2005.

   [RFC4627]  Crockford, D., "The application/json Media Type for
              JavaScript Object Notation (JSON)", RFC 4627, July 2006.

   [RFC5322]  Resnick, P., Ed., "Internet Message Format", RFC 5322,
              October 2008.

   [ecma262]  "ECMA 262 specification", <http://
              www.ecma-international.org/publications/files/ECMA-ST/
              Ecma-262.pdf>.



Galiegue, et al.         Expires March 27, 2013                [Page 22]

Internet-Draft                 JSON Schema                September 2012


Appendix A.  ChangeLog

   TODO

Authors' Addresses

   Francis Galiegue

   EMail: fgaliegue@gmail.com


   Kris Zyp (editor)
   SitePen (USA)
   530 Lytton Avenue
   Palo Alto, CA 94301
   USA

   Phone: +1 650 968 8787
   EMail: kris@sitepen.com


   Gary Court

   EMail: gary.court@gmail.com



























Galiegue, et al.         Expires March 27, 2013                [Page 23]

